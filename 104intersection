#!/usr/bin/python3

import sys
import math

def error_syntax(ac, opt, xp, yp, zp, xv, yv, zv, p):
    try:
        int(opt)
        int(xp)
        int(yp)
        int(zp)
        int(xv)
        int(yv)
        int(zv)
        int(p)
    except ValueError:
        sys.exit(84)
    if int(opt) < 1 or int(opt) == 0 or int(opt) > 4:
        sys.exit(84)
    if int(p) < 0 or int(opt) == 0:
        sys.exit(84)
    if int(xv) == 0 and int(yv) == 0 and int(zv) == 0:
        sys.exit(84)

def sphere(xp, yp, zp, xv, yv, zv, p):

    a = math.pow(int(xv), 2) + math.pow(int(yv), 2) + math.pow(int(zv), 2)
    b = (2 * int(xp) * int(xv)) +  (2 * int(yp) * int(yv)) + (2 * int(zp) * int(zv))
    c = (math.pow(int(xp), 2) + math.pow(int(yp), 2) + math.pow(int(zp), 2)) - math.pow(int(p), 2)
    delta = math.pow(float(b), 2) - 4 * float(a) * float(c)
    display_sphere(p)
    display(xp, yp, zp, xv, yv, zv)
    sort_delta(a, b, c, delta, xp, yp, zp, xv, yv, zv)

def cylinder(xp, yp, zp, xv, yv, zv, p):
    a = math.pow(int(xv), 2) + math.pow(int(yv), 2)
    b = (2 * int(xp) * int(xv)) +  (2 * int(yp) * int(yv))
    c = (math.pow(int(xp), 2) + math.pow(int(yp), 2)) - math.pow(int(p), 2)
    delta = math.pow(float(b), 2) - 4 * float(a) * float(c)
    display_cylinder(p)
    display(xp, yp, zp, xv, yv, zv)
    if a == 0 and b == 0 and c == 0:
        print("There is an infinite number of intersection points")
    else:
        sort_delta(a, b, c, delta, xp, yp, zp, xv, yv, zv)

def cone(xp, yp, zp, xv, yv, zv, p):
    angle = math.pow(math.tan(math.radians(int(p))), 2)
    if angle > 90:
        sys.exit(84)
    else:
        a = math.pow(int(xv), 2) + math.pow(int(yv), 2) - (math.pow(int(zv), 2) * angle)
        b = (2 * int(xp) * int(xv)) + (2 * int(yp) * int(yv)) - (2 * int (zv) * int(zp) * angle)
        c = math.pow(int(xp), 2) + math.pow(int(yp), 2) - math.pow(int(zp), 2) * angle
        delta = math.pow(float(b), 2) - 4 * float(a) * float(c)
        display_cone(p)
        display(xp, yp, zp, xv, yv, zv)
        sort_delta(a, b, c, delta, xp, yp, zp, xv, yv, zv)

def sort(opt, xp, yp, zp, xv, yv, zv, p):
    if (int(opt) == 1):
        sphere(xp, yp, zp, xv, yv, zv, p)
    if (int(opt) == 2):
        cylinder(xp, yp, zp, xv, yv, zv, p)
    if (int(opt) == 3):
        cone(xp, yp, zp, xv, yv, zv, p)

def sort_delta(a, b, c, delta, xp, yp, zp, xv, yv, zv):
    if float(delta) < 0:
        display_no_inter()
    elif float(delta) == 0:
        delta = "{0:.3f}".format(delta)
        display_one_inter(a, delta)
    elif float(delta) > 0:
        calc_solu(a, b, c, delta, xp, yp, zp, xv, yv, zv)

def calc_solu(a, b, c, delta, xp, yp, zp, xv, yv, zv):
    x_1 = (-b - math.sqrt(delta)) / (2 * a)
    x_2 = (-b + math.sqrt(delta)) / (2 * a)
    xx1 = int(xp) + x_1 * int(xv)
    yx1 = int(yp) + x_1 * int(yv)
    zx1 = int(zp) + x_1 * int(zv)
    xx2 = int(xp) + x_2 * int(xv)
    yx2 = int(yp) + x_2 * int(yv)
    zx2 = int(zp) + x_2 * int(zv)
    display_two_inter(xx1, yx1, zx1, xx2, yx2, zx2)

def display(xp, yp, zp, xv, yv, zv):
    print("Line passing through the point", "(" + str(xp) + ", " + str(yp) + ", " + str(zp) + ")" +
    " and parallel to the vector " + "(" + str(xv) + ", " + str(yv) + ", " + str(zv) + ")")

def display_sphere(p):
    print("Sphere of radius", p)

def display_cylinder(p):
    print("Cylinder of radius", p)

def display_cone(p):
    print("Cone with a " + str(p) + " degree angle")

def display_no_inter():
    print("No intersection point.")

def display_one_inter(a, delta):
    print("1 intersection point:")
    a = "{0:.3f}".format(a)
    print("(" + str(a) + ", " + str(delta) + ", " + str(delta) + ")")

def display_two_inter(xx1, yx1, zx1, xx2, yx2, zx2):
    print("2 intersection points:")
    print("(" + format(xx2, '.3f') + ", " + format(yx2, '.3f') + ", " + format(zx2, '.3f') + ")")
    print("(" + format(xx1, '.3f') + ", " + format(yx1, '.3f') + ", " + format(zx1, '.3f') + ")")

def flags_help():
    print("USAGE")
    print("     ./104intersection opt xp yp xv yv zv p")
    print("\n")
    print("DESCRIPTION")
    print("opt              surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone")
    print("(xp, yp, zp)     coordinates of a point by which the light ray passes through")
    print("(xv, yv, zv)     coordinates of a vector parallel to the light ray")
    print("p                parameter: radius of the sphere, radius of the cylinder, or\n                 angle formed by the cone and the Z-axis")
    sys.exit(0)

if __name__ == "__main__":
    argc = len(sys.argv)
    if argc == 2 and sys.argv[1] == "-h":
        flags_help()
    elif argc == 9:
        error_syntax(argc, sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7], sys.argv[8])
        sort(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7], sys.argv[8])  
    else:
        sys.exit(84)